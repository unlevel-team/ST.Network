{"version":3,"sources":["stNetwork/comSYS_Morse/scs_Routes/SCS_RouteNetNodes.js"],"names":[],"mappings":"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","file":"stNetwork/comSYS_Morse/scs_Routes/SCS_RouteNetNodes.js","sourcesContent":["\"use strict\";\r\n\r\n/**\r\n * import express\r\n * @ignore\r\n */\r\nlet express = require('express');\r\n\r\n/**\r\n * import bodyParser\r\n * @ignore\r\n */\r\nlet bodyParser = require('body-parser');\r\n\r\n\r\n/**\r\n * Routes for Net of Nodes\r\n * <pre>\r\n * Use with Server control service\r\n * </pre>\r\n * \r\n * @class\r\n * @memberof st.net.comsys_morse.scs_routes\r\n * \r\n * @property {object} expressRoute - Express route object\r\n * @property {number} messages - Counter for messages\r\n * \r\n * @property {NodesManager} nodesManager - Nodes manager\r\n * @property {st.net.NodesNetManager} nodesNetManager - Nodes Net manager\r\n * \r\n */\r\nclass SCS_RouteNetNodes {\r\n\t\r\n\t/**\r\n\t * \r\n\t * @constructs SCS_RouteNetNodes\r\n\t * \r\n\t * @param {NodesManager} nodesManager - Nodes manager\r\n\t * @param {st.net.services.NodesNetManager} nodesNetManager - Nodes Net manager\r\n\t * @param {object} expressRoute - Express route object\r\n\t * \r\n\t */\r\n\tconstructor(nodesManager, nodesNetManager, expressRoute) {\r\n\t\t\r\n\t\tthis.expressRoute = expressRoute;\r\n\t\tthis.messages = 0;\r\n\t\t\r\n\t\tthis.nodesManager = nodesManager;\r\n\t\tthis.nodesNetManager = nodesNetManager;\r\n\t\t\r\n\t\tthis.mapServiceRoutes();\r\n\t}\r\n\t\r\n\t\r\n\t/**\r\n\t * Get data channel of node\r\n\t */\r\n\t_getDCofNode(nodeID, channelID, routerNet) {\r\n\t\t\r\n\t\tif (routerNet === undefined) {\r\n\t\t\trouterNet = this;\r\n\t\t}\r\n\t\t\r\n\t\tlet ndm = routerNet.nodesManager;\r\n\t\tlet nnetm = routerNet.nodesNetManager;\r\n\t\t\r\n\t\t\r\n\t\tlet nodeSearch = ndm.getNodeByID(nodeID);\r\n\t\tif (nodeSearch.stNode === null) {\r\n\t\t\tthrow \"Node not found.\";\r\n\t\t}\r\n\t\t\r\n\t\tlet stNode = nodeSearch.stNode;\r\n\t\t\r\n\t\t\r\n\t\tlet dchSearch = nnetm.getDataChannelOfNode(nodeID, channelID);\r\n\t\tif (dchSearch.dataChannel === null) {\r\n\t\t\tthrow \"Data channel not found.\";\r\n\t\t}\r\n\t\t\r\n\t\tlet dch = dchSearch.dataChannel;\r\n\t\t\r\n\t\t\r\n\t\tlet response = {\r\n\t\t\t\"node\": stNode,\r\n\t\t\t\"dataChannel\": dch\r\n\t\t};\r\n\t\t\r\n\t\treturn response;\r\n\t}\r\n\t\r\n\t\r\n\t/**\r\n\t * Map service routes\r\n\t */\r\n\tmapServiceRoutes() {\r\n\t\t\r\n\t\tlet routerNet = this;\r\n\t\t\r\n\t\tif (routerNet.expressRoute === undefined || \r\n\t\t\t\trouterNet.expressRoute === null) {\r\n\t\t\trouterNet.expressRoute = express.Router();\r\n\t\t}\r\n\t\t\r\n\t\t\r\n\t\t//create application/json parser \r\n\t\tlet jsonParser = bodyParser.json();\r\n\r\n\t\t// middleware that is specific to this router\r\n\t\trouterNet.expressRoute.use(function messageCount(req, res, next) {\r\n\t\t\t\r\n\t\t\trouterNet.messages++;\r\n\t\t\t\r\n//\t\t\tres.setHeader('Content-Type', 'text/html');\r\n//\t\t\tres.write('ST Server Nodes <br />', 'utf8')\r\n\t\t\t\r\n\t\t\tres.setHeader('Content-Type', 'application/json');\r\n\t\t\tnext();\r\n\t\t\t\r\n\t\t});\r\n\t\t\r\n\t\t\r\n\t\t// define the home page route\r\n\t\trouterNet.expressRoute.get('/', function(req, res) {\r\n\t\t\t\r\n\t\t\trouterNet._route_Default({\r\n\t\t\t\t'req': req,\r\n\t\t\t\t'res': res,\r\n\t\t\t\t'routerNet': routerNet\r\n\t\t\t});\r\n\t\t\t\r\n\t\t});\r\n\t\t\r\n\t\t\r\n\t\t// List of data channels\r\n\t\trouterNet.expressRoute.get('/list/', function(req, res) {\r\n\t\t\t\r\n\t\t\trouterNet._route_DC_list({\r\n\t\t\t\t'req': req,\r\n\t\t\t\t'res': res,\r\n\t\t\t\t'routerNet': routerNet\r\n\t\t\t});\r\n\t\t\t\r\n\t\t});\r\n\t\t\r\n\t\t\r\n\t\t// List of data channels for node\r\n\t\trouterNet.expressRoute.get('/:nodeID/list/', function(req, res) {\r\n\t\t\t\r\n\t\t\trouterNet._route_DC_listforNode({\r\n\t\t\t\t'req': req,\r\n\t\t\t\t'res': res,\r\n\t\t\t\t'routerNet': routerNet,\r\n\t\t\t\t'nodeID': req.params.nodeID\r\n\t\t\t});\r\n\t\t\t\r\n\t\t});\r\n\t\t\r\n\t\t\r\n\t\t// Create data channel on node\r\n\t\trouterNet.expressRoute.get('/:nodeID/create/:channelID/:mode', function(req, res) {\r\n\t\t\t\r\n\t\t\trouterNet._route_createDC_onNode({\r\n\t\t\t\t'req': req,\r\n\t\t\t\t'res': res,\r\n\t\t\t\t'routerNet': routerNet,\r\n\t\t\t\t'nodeID': req.params.nodeID,\r\n\t\t\t\t'channelID': req.params.channelID,\r\n\t\t\t\t'mode': req.params.mode\r\n\t\t\t});\r\n\t\t\t\r\n\t\t});\r\n\t\t\r\n\t\t\r\n\t\t// Delete data channel on node\r\n\t\trouterNet.expressRoute.get('/:nodeID/delete/:channelID/', function(req, res) {\r\n\t\t\t\r\n\t\t\trouterNet._route_deleteDC_onNode({\r\n\t\t\t\t'req': req,\r\n\t\t\t\t'res': res,\r\n\t\t\t\t'routerNet': routerNet,\r\n\t\t\t\t'nodeID': req.params.nodeID,\r\n\t\t\t\t'channelID': req.params.channelID\r\n\t\t\t});\r\n\t\t\t\r\n\t\t});\r\n\r\n\t\t\r\n\t\t// Get options of data channel on node\r\n\t\trouterNet.expressRoute.get('/:nodeID/options/:channelID/', function(req, res) {\r\n\t\t\t\r\n\t\t\trouterNet._route_getDCoptions({\r\n\t\t\t\t'req': req,\r\n\t\t\t\t'res': res,\r\n\t\t\t\t'routerNet': routerNet,\r\n\t\t\t\t'nodeID': req.params.nodeID,\r\n\t\t\t\t'channelID': req.params.channelID\r\n\t\t\t});\r\n\t\t\t\r\n\t\t});\r\n\t\t\r\n\t\t\r\n\t\t// Set options of data channel on node\r\n\t\trouterNet.expressRoute.post('/:nodeID/options/:channelID/', jsonParser, function(req, res) {\r\n\t\t\t\r\n\t\t\trouterNet._route_setDCoptions({\r\n\t\t\t\t'req': req,\r\n\t\t\t\t'res': res,\r\n\t\t\t\t'routerNet': routerNet,\r\n\t\t\t\t'nodeID': req.params.nodeID,\r\n\t\t\t\t'channelID': req.params.channelID,\r\n\t\t\t\t'options': req.body.options\r\n\t\t\t});\r\n\t\t\t\r\n\t\t});\r\n\t\t\r\n\t\t\r\n\t\t// Route for Initialize data channel on node\r\n\t\trouterNet.expressRoute.get('/:nodeID/control/:channelID/init', function(req, res) {\r\n\t\t\t\r\n\t\t\trouterNet._route_initDC(req, res, routerNet);\r\n\t\t});\r\n\t\t\r\n\t\t\r\n\t\t// Route for Close data channel on node\r\n\t\trouterNet.expressRoute.get('/:nodeID/control/:channelID/close', function(req, res) {\r\n\t\t\t\r\n\t\t\trouterNet._route_closeDC(req, res, routerNet);\r\n\t\t});\r\n\t\t\r\n\t\t\r\n\t\t// Route for Start data channel on node\r\n\t\trouterNet.expressRoute.get('/:nodeID/control/:channelID/start', function(req, res) {\r\n\t\t\t\r\n\t\t\trouterNet._route_startDC(req, res, routerNet);\r\n\t\t});\r\n\t\t\r\n\t\t\r\n\t\t// Route for Stop data channel on node\r\n\t\trouterNet.expressRoute.get('/:nodeID/control/:channelID/stop', function(req, res) {\r\n\t\t\t\r\n\t\t\trouterNet._route_stopDC(req, res, routerNet);\r\n\t\t});\r\n\t}\r\n\t\r\n\t\r\n\t\r\n\t/**\r\n\t * Default response\r\n\t */\r\n\t_route_Default(options) {\r\n\t\t\r\n\t\tlet _req = options.req;\r\n\t\tlet _res = options.res;\r\n\t\t\r\n\t\tlet _routerNet = this;\r\n\t\tif (options.routerNet !== undefined) {\r\n\t\t\t_routerNet = options.routerNet;\r\n\t\t}\r\n\r\n\t\tlet _response = {\r\n\t\t\t\"context\" : \"ST Server Net of Nodes\",\r\n\t\t\t\"action\" : \"Default\",\r\n\t\t\t\"messagesReceived\" : _routerNet.messages\r\n\t\t\t\r\n\t\t};\r\n\t\t\r\n\t\t_res.jsonp(_response);\r\n\t\t_res.end();\r\n\t\t\r\n\t}\r\n\t\r\n\t\r\n\t/**\r\n\t * List of Data Channels\r\n\t */\r\n\t_route_DC_list(options) {\r\n\t\t\r\n\t\tlet _req = options.req;\r\n\t\tlet _res = options.res;\r\n\t\t\r\n\t\tlet _routerNet = this;\r\n\t\tif (options.routerNet !== undefined) {\r\n\t\t\t_routerNet = options.routerNet;\r\n\t\t}\r\n\r\n\t\tlet _response = {\r\n\t\t\t\"context\" : \"ST Server Net of Nodes\",\r\n\t\t\t\"action\" : \"List\",\r\n\t\t\t\"numberOfDataChannels\": 0,\r\n\t\t\t\"dataChannels\" : []\r\n\t\t};\r\n\t\t\r\n\t\t\r\n\t\t_routerNet.nodesNetManager.channelsList.forEach(function(_dch, _i) {\r\n\t\t\tlet _dchData = {\r\n\t\t\t\t\t\"channelID\" : _dch.config.id,\r\n\t\t\t\t\t\"type\": _dch.config.type,\r\n\t\t\t\t\t\"mode\": _dch.config.mode,\r\n\t\t\t\t\t\"state\": _dch.state\r\n\t\t\t};\r\n\t\t\t_response.dataChannels.push(_dchData);\r\n\t\t});\r\n\t\t\r\n\t\t_response.numberOfDataChannels = _routerNet.nodesNetManager.channelsList.length;\r\n\t\t\r\n\t\t\r\n\t\t_res.jsonp(_response);\r\n\t\t_res.end();\r\n\t}\r\n\t\r\n\t\r\n\t/**\r\n\t * List of Data Channels for one node\r\n\t */\r\n\t_route_DC_listforNode(options) {\r\n\t\t\r\n\t\tlet _req = options.req;\r\n\t\tlet _res = options.res;\r\n\t\t\r\n\t\tlet _routerNet = this;\r\n\t\tif (options.routerNet !== undefined) {\r\n\t\t\t_routerNet = options.routerNet;\r\n\t\t}\r\n\t\t\r\n\t\tlet _nodeID = options.nodeID;\r\n\t\t\r\n\t\tlet _response = {\r\n\t\t\t\"context\" : \"ST Server Net of Nodes\",\r\n\t\t\t\"action\" : \"List for node\",\r\n\t\t\t\"nodeID\" : req.params.nodeID,\r\n\t\t\t\"numberOfDataChannels\": 0,\r\n\t\t\t\"dataChannels\" : []\r\n\t\t};\r\n\t\t\r\n\t\t\r\n\t\tlet _dchSearch = _routerNet.nodesNetManager.getDataChannelsOfNode(_nodeID);\r\n\t\t\r\n\t\t_dchSearch.dataChannels.forEach(function(_dch, _i) {\r\n\t\t\tlet _dchData = {\r\n\t\t\t\t\t\"channelID\" : _dch.config.id,\r\n\t\t\t\t\t\"type\": _dch.config.type,\r\n\t\t\t\t\t\"mode\": _dch.config.mode,\r\n\t\t\t\t\t\"state\": _dch.state\r\n\t\t\t};\r\n\t\t\t_response.dataChannels.push(_dchData);\r\n\t\t});\r\n\t\t\r\n\t\t_response.numberOfDataChannels = _dchSearch.dataChannels.length;\r\n\t\t\r\n\t\t_res.jsonp(_response);\r\n\t\t_res.end();\r\n\t\t\r\n\t}\r\n\t\r\n\t\r\n\t/**\r\n\t * Create DC on Node\r\n\t */\r\n\t_route_createDC_onNode(options) {\r\n\t\t\r\n\t\tlet _req = options.req;\r\n\t\tlet _res = options.res;\r\n\t\t\r\n\t\tlet _routerNet = this;\r\n\t\tif (options.routerNet !== undefined) {\r\n\t\t\t_routerNet = options.routerNet;\r\n\t\t}\r\n\t\t\r\n\t\tlet _nodeID = options.nodeID;\r\n\t\tlet _channelID = options.channelID;\r\n\t\tlet _mode = options.mode;\r\n\t\t\r\n\t\t\r\n\t\tlet _response = {\r\n\t\t\t\"context\" : \"ST Server Net of Nodes\",\r\n\t\t\t\"action\" : \"Create input data channel\",\r\n\t\t\t\"nodeID\" : _nodeID,\r\n\t\t\t\"channelID\" : _channelID,\r\n\t\t\t\"mode\" : _mode\r\n\t\t};\r\n\t\t\r\n\t\t\r\n\t\ttry {\r\n\t\t\t\r\n\t\t\tlet _dchConfig = {\r\n\t\t\t\t\"mode\" : null\r\n\t\t\t};\r\n\t\t\t\r\n\t\t\tswitch (_mode) {\r\n\t\t\t\tcase \"in\":\r\n\t\t\t\t\t_dchConfig.mode = _routerNet.nodesNetManager.CONSTANTS.Config.modeIN;\r\n\t\t\t\t\tbreak;\r\n\t\r\n\t\t\t\tcase \"out\":\r\n\t\t\t\t\t_dchConfig.mode = _routerNet.nodesNetManager.CONSTANTS.Config.modeOUT;\r\n\t\t\t\t\tbreak;\t\r\n\t\t\t\t\t\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tthrow \"Bad mode.\";\r\n//\t\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t\r\n\t\t\tlet _nodeSearch = _routerNet.nodesManager.getNodeByID(_nodeID);\r\n\t\t\tif (_nodeSearch.stNode === null) {\r\n\t\t\t\tthrow \"Node not found.\";\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\ttry {\r\n\t\t\t\t_routerNet.nodesNetManager.addDataChannelToNode(_nodeSearch.stNode, _channelID, _dchConfig);\r\n\r\n\t\t\t} catch (e) {\r\n\t\t\t\tthrow \"Error adding channel. \" + e;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t\r\n\t\t} catch (e) {\r\n\t\t\t\r\n\t\t\t// TODO: handle exception\r\n\t\t\t\r\n\t\t\t_response.ERROR = e;\r\n\t\t}\r\n\t\t\r\n\t\t\r\n\t\t_res.jsonp(_response);\r\n\t\t_res.end();\r\n\t\t\r\n\t}\r\n\t\r\n\t\r\n\t/**\r\n\t * Delete DC on Node\r\n\t */\r\n\t_route_deleteDC_onNode(options) {\r\n\t\t\r\n\t\tlet _req = options.req;\r\n\t\tlet _res = options.res;\r\n\t\t\r\n\t\tlet _routerNet = this;\r\n\t\tif (options.routerNet !== undefined) {\r\n\t\t\t_routerNet = options.routerNet;\r\n\t\t}\r\n\t\t\r\n\t\tlet _nodeID = options.nodeID;\r\n\t\tlet _channelID = options.channelID;\r\n\t\t\r\n\t\t\r\n\t\tlet _ndm = _routerNet.nodesManager;\r\n\t\tlet _nnetm = _routerNet.nodesNetManager;\r\n\t\t\r\n\t\tlet _response = {\r\n\t\t\t\"context\" : \"ST Server Net of Nodes\",\r\n\t\t\t\"action\" : \"Delete data channel\",\r\n\t\t\t\"nodeID\" : _nodeID,\r\n\t\t\t\"channelID\" : _channelID\r\n\t\t};\r\n\t\t\r\n\t\t\r\n\t\ttry {\r\n\t\t\t\r\n\t\t\tlet _nodeSearch = _ndm.getNodeByID(_nodeID);\r\n\t\t\tif (_nodeSearch.stNode === null) {\r\n\t\t\t\tthrow \"Node not found.\";\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tlet _stNode = _nodeSearch.stNode;\r\n\t\t\t\r\n\t\t\tlet _dchSearch = _nnetm.getDataChannelOfNode(_nodeID, _channelID);\r\n\t\t\tif (_dchSearch.dataChannel === null) {\r\n\t\t\t\tthrow \"Data channel not found.\";\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\ttry {\r\n\t\t\t\t_nnetm._deleteDConNode(_channelID, _stNode);\r\n\t\t\t} catch (e) {\r\n\t\t\t\t// TODO: handle exception\r\n\t\t\t\tthrow \"Cannor delete DC on node. \" + e;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t} catch (e) {\r\n\t\t\t\r\n\t\t\t_response.ERROR = e;\r\n\t\t} \r\n\t\t\r\n\t\t\r\n\t\t_res.jsonp(_response);\r\n\t\t_res.end();\r\n\t\t\r\n\t}\r\n\t\r\n\t\r\n\t/**\r\n\t * Get data channel options\r\n\t */\r\n\t_route_getDCoptions(options) {\r\n\t\t\r\n\t\tlet _req = options.req;\r\n\t\tlet _res = options.res;\r\n\t\t\r\n\t\tlet _routerNet = this;\r\n\t\tif (options.routerNet !== undefined) {\r\n\t\t\t_routerNet = options.routerNet;\r\n\t\t}\r\n\t\t\r\n\t\tlet _nodeID = options.nodeID;\r\n\t\tlet _channelID = options.channelID;\r\n\t\t\r\n\t\t\r\n\t\tlet _ndm = _routerNet.nodesManager;\r\n\t\tlet _nnetm = _routerNet.nodesNetManager;\r\n\t\t\r\n\t\tlet _response = {\r\n\t\t\t\t\"context\" : \"ST Server Net of Nodes\",\r\n\t\t\t\t\"action\" : \"Get Options of data channel\",\r\n\t\t\t\t\"nodeID\" : _nodeID,\r\n\t\t\t\t\"channelID\" : _channelID,\r\n\t\t\t\t\"options\" : {}\r\n\t\t\t};\r\n\t\t\r\n\t\t\r\n\t\ttry {\r\n\t\t\t\r\n\t\t\tlet _searchDC = _routerNet._getDCofNode(_nodeID, _channelID, _routerNet);\r\n\t\t\tlet _dch = _searchDC.dataChannel;\r\n\t\t\t\r\n\t\t\t_response.options.type = _dch.config.type;\r\n\t\t\t_response.options.mode = _dch.config.mode;\r\n\t\t\t_response.options.state = _dch.config.state;\r\n\t\t\t_response.options.netstate = _dch.config._netState;\r\n\t\t\t_response.options.socketPort = _dch.config.socketPort;\r\n\t\t\t_response.options.netLocation = _dch.config.netLocation;\r\n\r\n\t\t\t\r\n\t\t} catch (e) {\r\n\t\t\t\r\n\t\t\t_response.ERROR = e;\r\n\t\t} \r\n\t\t\r\n\t\t\r\n\t\t_res.jsonp(_response);\r\n\t\t_res.end();\r\n\t\r\n\t}\t\r\n\t\r\n\t\r\n\t/**\r\n\t * Set data channel options\r\n\t */\r\n\t_route_setDCoptions(options) {\r\n\t\t\r\n\t\tlet _req = options.req;\r\n\t\tlet _res = options.res;\r\n\t\t\r\n\t\tlet _routerNet = this;\r\n\t\tif (options.routerNet !== undefined) {\r\n\t\t\t_routerNet = options.routerNet;\r\n\t\t}\r\n\t\t\r\n\t\tlet _nodeID = options.nodeID;\r\n\t\tlet _channelID = options.channelID;\r\n\t\tlet _options = options.options;\r\n\t\t\r\n\t\t\r\n\t\tlet _ndm = _routerNet.nodesManager;\r\n\t\tlet _nnetm = _routerNet.nodesNetManager;\r\n\t\t\r\n\t\tlet _response = {\r\n\t\t\t\"context\" : \"ST Server Net of Nodes\",\r\n\t\t\t\"action\" : \"Set Options of data channel\",\r\n\t\t\t\"nodeID\" : _nodeID,\r\n\t\t\t\"channelID\" : _channelID,\r\n\t\t\t\"options\" : _options\r\n\t\t};\r\n\t\t\r\n\t\t\r\n\t\ttry {\r\n\t\t\t\r\n\t\t\tlet _searchDC = _routerNet._getDCofNode(_nodeID, _channelID, _routerNet);\r\n\t\t\tlet _dch = _searchDC.dataChannel;\r\n\t\t\t\r\n\t\t\t_nnetm.setOptionsOfDataChannel(_dch, _options);\r\n\t\t\t\r\n\t\t} catch (e) {\r\n\t\t\t_response.ERROR = e;\r\n\t\t}\r\n\t\t\r\n\t\t\r\n\t\t_res.jsonp(_response);\r\n\t\t_res.end();\r\n\r\n\t}\r\n\t\r\n\t\r\n\t/**\r\n\t * Initialize data channel on node\r\n\t */\r\n\t_route_initDC(req, res, routerNet) {\r\n\t\t\r\n\t\tif (routerNet === undefined) {\r\n\t\t\trouterNet = this;\r\n\t\t}\r\n\t\t\r\n\t\tlet ndm = routerNet.nodesManager;\r\n\t\tlet nnetm = routerNet.nodesNetManager;\r\n\t\t\r\n\t\tlet _response = {\r\n\t\t\t\t\"context\" : \"ST Server Net of Nodes\",\r\n\t\t\t\t\"action\" : \"Initialize data channel\",\r\n\t\t\t\t\"nodeID\" : req.params.nodeID,\r\n\t\t\t\t\"channelID\" : req.params.channelID\r\n\t\t\t};\r\n\t\t\r\n\t\ttry {\r\n\t\t\t\r\n\t\t\tlet searchDC = routerNet._getDCofNode(_response.nodeID, _response.channelID, routerNet);\r\n\t\t\tlet dch = searchDC.dataChannel;\r\n\t\t\tlet stNode = searchDC.node;\r\n\t\t\t\r\n\t\t\ttry {\r\n\t\t\t\t\r\n\t\t\t\tdch.initDataChannel();\r\n\t\t\t\t\r\n\t\t\t} catch (e) {\r\n\t\t\t\tthrow \"Cannot init channel. \" + e;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t\r\n\t\t} catch (e) {\r\n\t\t\t_response.ERROR = e;\r\n\t\t}\r\n\t\t\r\n\t\t\r\n\t\tres.jsonp(_response);\r\n\t\tres.end();\r\n\t\t\r\n\t}\r\n\t\r\n\t\r\n\t/**\r\n\t * Close data channel on node\r\n\t */\r\n\t_route_closeDC(req, res, routerNet) {\r\n\t\t\r\n\t\tif (routerNet === undefined) {\r\n\t\t\trouterNet = this;\r\n\t\t}\r\n\t\t\r\n\t\tlet ndm = routerNet.nodesManager;\r\n\t\tlet nnetm = routerNet.nodesNetManager;\r\n\t\t\r\n\t\tlet _response = {\r\n\t\t\t\t\"context\" : \"ST Server Net of Nodes\",\r\n\t\t\t\t\"action\" : \"Close data channel\",\r\n\t\t\t\t\"nodeID\" : req.params.nodeID,\r\n\t\t\t\t\"channelID\" : req.params.channelID\r\n\t\t\t};\r\n\t\t\r\n\t\ttry {\r\n\t\t\t\r\n\t\t\tlet searchDC = routerNet._getDCofNode(_response.nodeID, _response.channelID, routerNet);\r\n\t\t\tlet dch = searchDC.dataChannel;\r\n\t\t\tlet stNode = searchDC.node;\r\n\t\t\t\r\n\t\t\ttry {\r\n\t\t\t\t\r\n\t\t\t\tdch.closeDataChannel();\r\n\t\t\t\t\r\n\t\t\t} catch (e) {\r\n\t\t\t\tthrow \"Cannot close channel. \" + e;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t\r\n\t\t} catch (e) {\r\n\t\t\t_response.ERROR = e;\r\n\t\t}\r\n\t\t\r\n\t\t\r\n\t\tres.jsonp(_response);\r\n\t\tres.end();\r\n\t\t\r\n\t}\r\n\t\r\n\t\r\n\t/**\r\n\t * Start data channel on node\r\n\t */\r\n\t_route_startDC(req, res, routerNet) {\r\n\t\t\r\n\t\tif (routerNet === undefined) {\r\n\t\t\trouterNet = this;\r\n\t\t}\r\n\t\t\r\n\t\tlet ndm = routerNet.nodesManager;\r\n\t\tlet nnetm = routerNet.nodesNetManager;\r\n\t\t\r\n\t\tlet _response = {\r\n\t\t\t\t\"context\" : \"ST Server Net of Nodes\",\r\n\t\t\t\t\"action\" : \"Start data channel\",\r\n\t\t\t\t\"nodeID\" : req.params.nodeID,\r\n\t\t\t\t\"channelID\" : req.params.channelID\r\n\t\t\t};\r\n\t\t\r\n\t\ttry {\r\n\t\t\t\r\n\t\t\tlet searchDC = routerNet._getDCofNode(_response.nodeID, _response.channelID, routerNet);\r\n\t\t\tlet dch = searchDC.dataChannel;\r\n\t\t\tlet stNode = searchDC.node;\r\n\t\t\t\r\n\t\t\ttry {\r\n\t\t\t\t\r\n\t\t\t\tdch.startDataChannel();\r\n\t\t\t\t\r\n\t\t\t} catch (e) {\r\n\t\t\t\tthrow \"Cannot start channel. \" + e;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t\r\n\t\t} catch (e) {\r\n\t\t\t_response.ERROR = e;\r\n\t\t}\r\n\t\t\r\n\t\t\r\n\t\tres.jsonp(_response);\r\n\t\tres.end();\r\n\t\t\r\n\t}\r\n\t\r\n\t\r\n\t/**\r\n\t * Stop data channel on node\r\n\t */\r\n\t_route_stopDC(req, res, routerNet) {\r\n\t\t\r\n\t\tif (routerNet === undefined) {\r\n\t\t\trouterNet = this;\r\n\t\t}\r\n\t\t\r\n\t\tlet ndm = routerNet.nodesManager;\r\n\t\tlet nnetm = routerNet.nodesNetManager;\r\n\t\t\r\n\t\tlet _response = {\r\n\t\t\t\t\"context\" : \"ST Server Net of Nodes\",\r\n\t\t\t\t\"action\" : \"Stop data channel\",\r\n\t\t\t\t\"nodeID\" : req.params.nodeID,\r\n\t\t\t\t\"channelID\" : req.params.channelID\r\n\t\t\t};\r\n\t\t\r\n\t\ttry {\r\n\t\t\t\r\n\t\t\tlet searchDC = routerNet._getDCofNode(_response.nodeID, _response.channelID, routerNet);\r\n\t\t\tlet dch = searchDC.dataChannel;\r\n\t\t\tlet stNode = searchDC.node;\r\n\t\t\t\r\n\t\t\ttry {\r\n\t\t\t\t\r\n\t\t\t\tdch.stopDataChannel();\r\n\t\t\t\t\r\n\t\t\t} catch (e) {\r\n\t\t\t\tthrow \"Cannot stop channel. \" + e;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t\r\n\t\t} catch (e) {\r\n\t\t\t_response.ERROR = e;\r\n\t\t}\r\n\t\t\r\n\t\t\r\n\t\tres.jsonp(_response);\r\n\t\tres.end();\r\n\t\t\r\n\t}\r\n\t\r\n\t\r\n}\r\n\r\n\r\nmodule.exports = SCS_RouteNetNodes;\r\n"],"sourceRoot":"C:\\Users\\Felipe\\Documents\\Work\\SomeThings\\dev\\NLVL_STNetwork\\es6"}