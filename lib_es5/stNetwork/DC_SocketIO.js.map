{"version":3,"sources":["stNetwork/DC_SocketIO.js"],"names":[],"mappings":"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","file":"stNetwork/DC_SocketIO.js","sourcesContent":["\"use strict\";\r\n\r\n/**\r\n * DC_SocketIO library\r\n * \r\n * Provides data channel to ST network based on socket.io\r\n * \r\n * \r\n */\r\n\r\n\r\n/**\r\n * Import EventEmitter\r\n * @ignore\r\n */\r\nlet EventEmitter = require('events').EventEmitter;\r\n\r\n/**\r\n * Import DataChannel\r\n * @ignore\r\n */\r\nlet DataChannel = require('./DataChannel.js').DataChannel;\r\n\r\n\r\n/**\r\n * Import portscanner\r\n * @ignore\r\n */\r\nlet portscanner = require('portscanner');\r\n\r\n/**\r\n * Import portscanner\r\n * @ignore\r\n */\r\nlet http = require('http');\r\n\r\n\r\n/**\r\n * Data Channel for Socket.io type\r\n */\r\nclass DC_SocketIO extends DataChannel {\r\n\t\r\n\tconstructor(config) {\r\n\t\tsuper(config);\r\n\t}\r\n\t\r\n\t/**\r\n\t * Initialize data channel\r\n\t */\r\n\tinitDataChannel() {\r\n\t\t\r\n\t\tlet dc = this;\r\n\t\t\r\n\t\tsuper.initDataChannel();\r\n\t\t\r\n\t\tif (dc.config.socketPort === undefined) {\r\n\t\t\tthrow \"Socket port not defined.\";\r\n\t\t}\r\n\t\t\r\n\t\tif (dc.config.netLocation === undefined) {\r\n\t\t\tthrow \"Net location not defined.\";\r\n\t\t}\r\n\t\t\r\n\t\tswitch ( dc.config.mode ) {\r\n\t\t\tcase dc.CONSTANTS.Config.modeIN:\r\n\t\t\t\tdc.initDC_modeIN();\r\n\t\t\t\tbreak;\r\n\t\t\tcase dc.CONSTANTS.Config.modeOUT:\r\n\t\t\t\tdc.initDC_modeOUT();\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\t\t\r\n\t}\r\n\t\r\n\t\r\n\t/**\r\n\t * Initialize mode IN\r\n\t */\r\n\tinitDC_modeIN() {\r\n\t\t\r\n\t\tlet dc = this;\r\n\t\t\r\n\t\tif (dc.server !== null) {\r\n\t\t\t throw \"Server is initialized\";\r\n\t\t}\r\n\t\t\r\n\r\n\t\tdc.server = require('socket.io')();\r\n\t\t\r\n\t\t// Map connection of Socket\r\n\t\tdc.server.on('connection', function(socket){\t\r\n\t\t\t\r\n\t\t\tdc.eventEmitter.emit( dc.CONSTANTS.Events.ClientConnected , {\"socket\" : socket} );\t// Emit event ClientConnected\r\n\t\t\t  \r\n\t\t\t// Map disconnection of Socket\r\n\t\t\tsocket.on('disconnect', function(){\t\r\n\t\t\t\tdc.eventEmitter.emit( dc.CONSTANTS.Events.ClientDisconnected , {\"socket\" : socket} );\t// Emit event ClientDisconnected\r\n\r\n\t\t\t});\r\n\t\t\t  \r\n\t\t\t// Map message of Socket\r\n\t\t\tsocket.on( dc.CONSTANTS.Messages.DataMessage , function(msg){\t\r\n\t\t\t\tdc.eventEmitter.emit( dc.CONSTANTS.Events.MessageReceived , msg );\t// Emit event MessageReceived\r\n\r\n\t\t\t});\r\n\t\t\t  \r\n\t\t});\r\n\t\t\r\n\r\n\t\t// Map event MainLoop_Tick\r\n\t\tdc.eventEmitter.on( dc.CONSTANTS.Events.MainLoop_Tick, function() {\t\r\n\t\t\t\r\n\t\t\tconsole.log('<*> ST DC_SocketIO.MainLoop_Tick');\t// TODO REMOVE DEBUG LOG\r\n\t\t\tconsole.log(' <~> ChannelID: ' + dc.config.id);\t// TODO REMOVE DEBUG LOG\r\n\t\t\tconsole.log(dc.messagesList);\t// TODO REMOVE DEBUG LOG\r\n\t\t\t\r\n\t\t\t// Emit messages to socket\r\n\t\t\tif (dc.messagesList.length > 0) {\r\n\t\t\t\tdc.server.sockets.emit(dc.CONSTANTS.Messages.DataMessage , dc.messagesList);\r\n\t\t\t\tdc.messagesList = [];\r\n\t\t\t}\r\n\r\n\t\t});\r\n\t\t\r\n\t\t\r\n\t\t\r\n\t\t\r\n\t\t// Checks the status of a single port\r\n\t\tportscanner.checkPortStatus(\r\n\t\t\t\tdc.config.socketPort, \r\n\t\t\t\tdc.config.netLocation, \r\n\t\t\t\tfunction(error, status) {\r\n\t\t  // Status is 'open' if currently in use or 'closed' if available\r\n\t\t  // console.log(status)\r\n\t\t\t\r\n\t\t  switch (status) {\r\n\t\t  \r\n\t\t\tcase 'closed':\r\n\t\t\t\t\r\n\t\t\t\t// Connect socket.IO to any IP...\r\n\t\t\t\t\r\n\t\t\t\tdc._server = http.createServer();\r\n\t\t\t\tdc._server.listen(\r\n\t\t\t\t\t\tdc.config.socketPort, \r\n\t\t\t\t\t\tdc.config.netLocation);\r\n\t\t\t\t\r\n\t\t\t\tdc.server.listen( dc._server );\r\n\t\t\t\t\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tdefault:\r\n\t\t\t\t\r\n\t\t\t\tdc.server = null;\r\n\t\t\t\tthrow \"Net location already busy.\";\r\n\t\t\t\t\r\n//\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t  \r\n\t\t});\r\n\t\t\r\n\t\t\r\n\t\t\r\n\t\t// Change state to Ready\r\n\t\tdc.state = dc.CONSTANTS.States.DCstate_Ready;\r\n\t\t\r\n\t\t// Emit event Channel initialized\r\n\t\tdc.eventEmitter.emit( dc.CONSTANTS.Events.ChannelInitialized );\r\n\t}\r\n\t\r\n\t\r\n\t/**\r\n\t * Initialize mode OUT\r\n\t */\r\n\tinitDC_modeOUT() {\r\n\t\t\r\n\t\tlet dc = this;\r\n\t\t\r\n\t\tif (dc.socket !== null) {\r\n\t\t\t throw \"Socket is initialized\";\r\n\t\t}\r\n\t\t\r\n\t\t\r\n\t\tdc._serverURL = 'http://' + dc.config.netLocation + ':' + dc.config.socketPort;\r\n\r\n\t\t\r\n\t\t\r\n\t\t// Map event MainLoop_Tick\r\n\t\tdc.eventEmitter.on( dc.CONSTANTS.Events.MainLoop_Tick, function() {\t\r\n\t\t\t\r\n\t\t\tconsole.log('<*> ST DC_SocketIO.MainLoop_Tick');\t// TODO REMOVE DEBUG LOG\r\n\t\t\tconsole.log(' <~> ChannelID: ' + dc.config.id);\t// TODO REMOVE DEBUG LOG\r\n\t\t\tconsole.log(dc.messagesList);\t// TODO REMOVE DEBUG LOG\r\n\t\t\t\r\n\t\t\t// Emit messages to socket\r\n\t\t\tif (dc.messagesList.length > 0) {\r\n\t\t\t\tdc.socket.emit(dc.CONSTANTS.Messages.DataMessage , dc.messagesList);\r\n\t\t\t\tdc.messagesList = [];\r\n\t\t\t}\r\n\t\t\t\r\n\t\t});\r\n\t\t\r\n\t\t\r\n\t\tdc.socket = require('socket.io-client')(dc._serverURL);\t// connect to server\r\n\t\t\r\n\t\t\r\n//\t\tvar socket = new io.Socket();\r\n//\t\tsocket.connect('http://' + ipAddress + ':' + port);\r\n\t\t\t\r\n\t\t\r\n\t\t// Map event connect\r\n\t\tdc.socket.on('connect', function(){\t\r\n\t\t\tdc.eventEmitter.emit( dc.CONSTANTS.Events.ChannelConnected );\t// Emit event ChannelStarted\r\n\t\t\t  \r\n\t\t});\r\n\r\n\t\t// Map event disconnect\r\n\t\tdc.socket.on('disconnect', function(){\t\r\n\t\t\tdc.eventEmitter.emit( dc.CONSTANTS.Events.ChannelDisconnected );\t// Emit event ChannelStop\r\n\r\n\t\t});\r\n\t\t\r\n\t\t// Map message of Socket\r\n\t\tdc.socket.on( dc.CONSTANTS.Messages.DataMessage , function(msg){\t\r\n\t\t\tdc.eventEmitter.emit( dc.CONSTANTS.Events.MessageReceived , msg );\t// Emit event MessageReceived\r\n\r\n\t\t});\r\n\t\t\r\n\r\n\t\t\r\n\t\t// Change state to Ready\r\n\t\tdc.state = dc.CONSTANTS.States.DCstate_Ready;\r\n\t\t\r\n\t\t// Emit event Channel initialized\r\n\t\tdc.eventEmitter.emit( dc.CONSTANTS.Events.ChannelInitialized );\r\n\r\n\t}\r\n\t\r\n\t\r\n\t/**\r\n\t * Close data channel\r\n\t */\r\n\tcloseDataChannel() {\r\n\t\t\r\n\t\tsuper.closeDataChannel();\r\n\t\t\r\n\t\tlet dc = this;\r\n\t\t\r\n\t\tswitch ( dc.config.mode ) {\r\n\t\t\r\n\t\t\tcase dc.CONSTANTS.Config.modeIN:\r\n\t\t\t\tdc.server.close();\r\n\t\t\t\tdc.server = null;\r\n\t\t\t\tbreak;\r\n\t\t\t\t\r\n\t\t\tcase dc.CONSTANTS.Config.modeOUT:\r\n\t\t\t\tdc.socket.close();\r\n\t\t\t\tdc.socket = null;\r\n\t\t\t\tbreak;\r\n\t\t\t\t\r\n\t\t\tdefault:\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\t\t\r\n\t\t// Change state to Config\r\n\t\tdc.state = dc.CONSTANTS.States.DCstate_Config;\r\n\t\t\r\n\t\t// Emit event ChannelClosed\r\n\t\tdc.eventEmitter.emit( dc.CONSTANTS.Events.ChannelClosed );\r\n\r\n\t\t\r\n\t}\r\n\t\r\n\t\r\n\t/**\r\n\t * Start data channel\r\n\t */\r\n\tstartDataChannel() {\r\n\t\t\r\n\t\tsuper.startDataChannel();\r\n\t\t\r\n\t\tlet dc = this;\r\n\t\t\r\n\t\tdc.mainLoop();\r\n\t\t\r\n\t\t// Emit event ChannelClosed\r\n\t\tdc.eventEmitter.emit( dc.CONSTANTS.Events.ChannelStarted );\r\n\r\n\t}\r\n\t\r\n\t\r\n\t/**\r\n\t * Stop data channel\r\n\t */\r\n\tstopDataChannel() {\r\n\t\t\r\n\t\tsuper.stopDataChannel();\r\n\t\t\r\n\t\tlet dc = this;\r\n\t\t\r\n\t\tdc.stopMainLoop();\r\n\r\n\t}\r\n\t\r\n}\r\n\r\n\r\nmodule.exports = DC_SocketIO;"],"sourceRoot":"C:\\Users\\Felipe\\Documents\\Work\\SomeThings\\dev\\NLVL_STNetwork\\es6"}