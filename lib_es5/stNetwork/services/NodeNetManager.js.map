{"version":3,"sources":["stNetwork/services/NodeNetManager.js"],"names":[],"mappings":"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","file":"stNetwork/services/NodeNetManager.js","sourcesContent":["\"use strict\";\r\n\r\n/*\r\n Node Net manager\r\n \r\n - Provides net management for node.\r\n - Add data channel to node\r\n - Remove data channel from node\r\n - Get data channels of node\r\n \r\n \r\n */\r\n\r\n\r\n/**\r\n * import DataChannelsManager\r\n * @ignore\r\n */\r\nlet DataChannelsManager = require('../DataChannel.js').DataChannelsManager;\r\n\r\n\r\n/**\r\n * Node net manager\r\n * \r\n * @class\r\n * @memberof st.net.services\r\n * @implements st.net.DataChannelsManager\r\n */\r\nclass NodeNetManager extends DataChannelsManager {\r\n\t\r\n\t/**\r\n\t * @constructs NodeNetManager\r\n\t * \r\n\t * @param {object} config - Configuration object\r\n\t */\r\n\tconstructor(config) {\r\n\t\tsuper();\r\n\t\tthis.config = config;\r\n\r\n\t}\r\n\t\r\n\t\r\n\t/**\r\n\t * Add data channel to node\r\n\t * \r\n\t * @param {string} dchID - Data channel ID (DC.id)\r\n\t * @param {object} config - DC configuration\r\n\t */\r\n\taddDataChannelToNode(dchID, config) {\r\n\t\t\r\n\t\tlet nnetm = this;\r\n\t\tlet node = nnetm.config._node;\r\n\t\tlet nodeConfig = node.nodeConfiguration.config;\r\n\t\t\r\n\t\tlet dch_Config = {\r\n\t\t\tid: dchID,\r\n\t\t\ttype: nnetm.CONSTANTS.Config.DCtype_socketio,\r\n\t\t\t_nodeID: nodeConfig.node.nodeID,\r\n\t\t\t_node: node,\r\n\t\t\t_dchID: nodeConfig.node.nodeID + '.' + dchID,\r\n\t\t\t_netState: nnetm.CONSTANTS.States.DCstate_Config\r\n\t\t};\r\n\t\t\r\n\t\t\r\n\t\t// @ @ @ ^^^ @ @ @ ^^^ @ @ @ ^^^ @ @ @ ^^^ @ @ @ ^^^ @ @ @ ^^^ @ @ @ ^^^ |\\/| ^^^\r\n\t\t// Extra config parameters\r\n\t\tif (config !== undefined && \r\n\t\t\t\tconfig !== null) {\r\n\t\t\t\r\n\t\t\tif (config.mode) {\r\n\t\t\t\tdch_Config.mode = config.mode;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (config.socketPort) {\r\n\t\t\t\tdch_Config.socketPort = config.socketPort;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (config.netLocation) {\r\n\t\t\t\tdch_Config.netLocation = config.netLocation;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t}\r\n\t\t// @ @ @ ^^^ @ @ @ ^^^ @ @ @ ^^^ @ @ @ ^^^ @ @ @ ^^^ @ @ @ ^^^ @ @ @ ^^^ |/\\| ^^^\r\n\r\n\t\t\r\n\t\tlet dch = DataChannelsManager.get_DataChannel(dch_Config);\r\n\t\t\r\n\t\tnnetm._mapDCcontrolEvents(dch);\r\n\t\t\r\n\t\tnnetm.addDataChannel(dch);\r\n\t}\r\n\t\r\n\t\r\n\t/**\r\n\t * Remove data channel from node\r\n\t * \r\n\t * @param {(st.net.DataChannel|string)} dc - could be DC.id or DC object\r\n\t */\r\n\tremoveDataChannelFromNode(dc) {\r\n\t\t\r\n\t\tlet nnetm = this;\r\n\t\t\r\n\t\tlet dataChannel = null;\r\n\t\t\r\n\t\t\r\n\t\t// check for DC.id or DC object\r\n\t\tif (dc.config !== undefined) {\r\n\t\t\tdataChannel = dc;\r\n\t\t} else {\r\n\t\t\tlet dchSearch = nnetm.getDataChannelByID(dc);\r\n\t\t\tif (dchSearch.dataChannel === null){\r\n\t\t\t\tthrow \"Channel not found.\";\r\n\t\t\t}\r\n\t\t\tdataChannel = dchSearch.dataChannel;\r\n\t\t}\r\n\t\t\r\n\t\t\r\n\t\tlet channelID = dataChannel.config.id;\r\n\t\t\r\n\t\tif (dataChannel.state !== dataChannel.CONSTANTS.States.DCstate_Config) {\r\n\t\t\tthrow \"Bad channel state.\";\r\n\t\t}\r\n\r\n\t\t\r\n\t\tnnetm._unMapDCcontrolEvents(dataChannel);\r\n\t\t\r\n\t\tnnetm.removeDataChannel(channelID);\r\n\t\t\r\n\t}\r\n\t\r\n\t\r\n\t/**\r\n\t * Map control events for DC\r\n\t * \r\n\t * @param {st.net.DataChannel} dch - Data channel object\r\n\t */\r\n\t_mapDCcontrolEvents(dch) {\r\n\t\t\r\n\t\tlet nnetm = this;\r\n\t\t\r\n\t\t// Map event ChannelInitialized\r\n\t\tdch.eventEmitter.on(dch.CONSTANTS.Events.ChannelInitialized, function(data) {\r\n\t\t\tnnetm._event_ChannelInitialized(data, dch, nnetm);\r\n\t\t});\r\n\t\t\r\n\t\t// Map event ChannelStarted\r\n\t\tdch.eventEmitter.on(dch.CONSTANTS.Events.ChannelStarted, function(data) {\r\n\t\t\tnnetm._event_ChannelStarted(data, dch, nnetm);\r\n\t\t});\r\n\t\t\r\n\t\t// Map event ChannelStopped\r\n\t\tdch.eventEmitter.on(dch.CONSTANTS.Events.ChannelStopped, function(data) {\r\n\t\t\tnnetm._event_ChannelStopped(data, dch, nnetm);\r\n\t\t});\r\n\t\t\r\n\t\t// Map event ChannelClosed\r\n\t\tdch.eventEmitter.on(dch.CONSTANTS.Events.ChannelClosed, function(data) {\r\n\t\t\tnnetm._event_ChannelClosed(data, dch, nnetm);\r\n\t\t});\r\n\t}\r\n\t\r\n\t\r\n\t/**\r\n\t * UnMap control events for DC\r\n\t * \r\n\t * @param {st.net.DataChannel} dch - Data channel object\r\n\t */\r\n\t_unMapDCcontrolEvents(dch) {\r\n\t\t\r\n\t\tlet nnetm = this;\r\n\t\t\r\n\t\tdch.eventEmitter.removeAllListeners(dch.CONSTANTS.Events.ChannelInitialized);\r\n\t\tdch.eventEmitter.removeAllListeners(dch.CONSTANTS.Events.ChannelStarted);\r\n\t\tdch.eventEmitter.removeAllListeners(dch.CONSTANTS.Events.ChannelStopped);\r\n\t\tdch.eventEmitter.removeAllListeners(dch.CONSTANTS.Events.ChannelClosed);\r\n\r\n\t\t\r\n\t}\r\n\t\r\n\t\r\n\t/**\r\n\t * Set data channel options\r\n\t * \r\n\t * @param {st.net.DataChannel} dch - Data channel object\r\n\t * @param {object} options - Options object\r\n\t * @param {number} [options.loopTime] - Looptime \r\n\t * @param {string} [options.netLocation] - Net location \r\n\t * @param {number} [options.socketPort] - Socket port \r\n\t * \r\n\t */\r\n\tsetDCOptions(dch, options) {\r\n\t\t\r\n\t\tlet nnetm = this;\r\n\t\t\r\n\t\tif (dch.state !== dch.CONSTANTS.States.DCstate_Config) {\r\n\t\t\tthrow \"Bad data channel state\";\r\n\t\t}\r\n\t\t\r\n\t\tif (options.loopTime) {\r\n\t\t\tdch.config.loopTime = options.loopTime;\r\n\t\t}\r\n\t\t\r\n\t\tif (options.netLocation) {\r\n\t\t\tdch.config.netLocation = options.netLocation;\r\n\t\t}\r\n\t\t\r\n\t\tif (options.socketPort) {\r\n\t\t\tdch.config.socketPort = options.socketPort;\r\n\t\t}\r\n\t\t\r\n\t\t\r\n\t}\r\n\t\r\n\t\r\n\t/**\r\n\t * Event ChannelInitialized\r\n\t * \r\n\t * @param {object} data - Event data \r\n\t * @param {st.net.DataChannel} dch - Data Channel object\r\n\t * @param {st.net.services.NodeNetManager} nnetm - Node Net manager object\r\n\t */\r\n\t_event_ChannelInitialized(data, dch, nnetm) {\r\n\t\t\r\n\t\tif (nnetm === undefined) {\r\n\t\t\tnnetm = this;\r\n\t\t}\r\n\t\t\r\n\t\t// Emit event ChannelInitialized\r\n\t\tnnetm.eventEmitter.emit(nnetm.CONSTANTS.Events.ChannelInitialized, \r\n\t\t\t{\r\n\t\t\t\t\"channelID\": dch.config.id,\r\n\t\t\t\t\"dataChannel\": dch\r\n\t\t\t});\r\n\t\t\r\n\t}\r\n\t\r\n\t\r\n\t/**\r\n\t * Event ChannelStarted\r\n\t * \r\n\t * @param {object} data - Event data \r\n\t * @param {st.net.DataChannel} dch - Data Channel object\r\n\t * @param {st.net.services.NodeNetManager} nnetm - Node Net manager object\r\n\t */\r\n\t_event_ChannelStarted(data, dch, nnetm) {\r\n\t\t\r\n\t\tif (nnetm === undefined) {\r\n\t\t\tnnetm = this;\r\n\t\t}\r\n\t\t\r\n\t\t// Emit event ChannelInitialized\r\n\t\tnnetm.eventEmitter.emit(nnetm.CONSTANTS.Events.ChannelStarted, \r\n\t\t\t{\r\n\t\t\t\t\"channelID\": dch.config.id,\r\n\t\t\t\t\"dataChannel\": dch\r\n\t\t\t});\r\n\t\t\r\n\t}\r\n\t\r\n\t\r\n\t/**\r\n\t * Event ChannelStopped\r\n\t * \r\n\t * @param {object} data - Event data \r\n\t * @param {st.net.DataChannel} dch - Data Channel object\r\n\t * @param {st.net.services.NodeNetManager} nnetm - Node Net manager object\r\n\t */\r\n\t_event_ChannelStopped(data, dch, nnetm) {\r\n\t\t\r\n\t\tif (nnetm === undefined) {\r\n\t\t\tnnetm = this;\r\n\t\t}\r\n\t\t\r\n\t\t// Emit event ChannelInitialized\r\n\t\tnnetm.eventEmitter.emit(nnetm.CONSTANTS.Events.ChannelStopped, \r\n\t\t\t{\r\n\t\t\t\t\"channelID\": dch.config.id,\r\n\t\t\t\t\"dataChannel\": dch\r\n\t\t\t});\r\n\t\t\r\n\t}\r\n\t\r\n\t\r\n\t/**\r\n\t * Event ChannelClosed\r\n\t * \r\n\t * @param {object} data - Event data \r\n\t * @param {st.net.DataChannel} dch - Data Channel object\r\n\t * @param {st.net.services.NodeNetManager} nnetm - Node Net manager object\r\n\t */\r\n\t_event_ChannelClosed(data, dch, nnetm) {\r\n\t\t\r\n\t\tif (nnetm === undefined) {\r\n\t\t\tnnetm = this;\r\n\t\t}\r\n\t\t\r\n\t\t// Emit event ChannelClosed\r\n\t\tnnetm.eventEmitter.emit(nnetm.CONSTANTS.Events.ChannelClosed, \r\n\t\t\t{\r\n\t\t\t\t\"channelID\": dch.config.id,\r\n\t\t\t\t\"dataChannel\": dch\r\n\t\t\t});\r\n\t\t\r\n\t}\r\n}\r\n\r\nmodule.exports = NodeNetManager;\r\n\r\n"],"sourceRoot":"C:\\Users\\Felipe\\Documents\\Work\\SomeThings\\dev\\NLVL_STNetwork\\es6"}