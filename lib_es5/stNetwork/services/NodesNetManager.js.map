{"version":3,"sources":["stNetwork/services/NodesNetManager.js"],"names":[],"mappings":"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","file":"stNetwork/services/NodesNetManager.js","sourcesContent":["\"use strict\";\r\n\r\n/*\r\n Nodes Net manager\r\n\r\n - Provides net management for nodes.\r\n - Add data channel to node\r\n - Remove data channel from node\r\n - Get data channels of node\r\n\r\n\r\n */\r\n\r\n\r\n/**\r\n * import DataChannel\r\n * @ignore\r\n */\r\nlet DataChannel = require('../DataChannel.js').DataChannel;\r\n\r\n\r\n/**\r\n * import DataChannelsManager\r\n * @ignore\r\n */\r\nlet DataChannelsManager = require('../DataChannel.js').DataChannelsManager;\r\n\r\n/**\r\n * import NETservices_CONSTANTS\r\n * @ignore\r\n */\r\nlet NETservices_CONSTANTS = require('./NETservices.js').NETservices_CONSTANTS;\r\n\r\n\r\n/**\r\n * Node data channel\r\n * \r\n * @class\r\n * @implements DataChannel\r\n */\r\nclass NodeDC extends DataChannel {\r\n\t\r\n\t/**\r\n\t * @constructs NodeDC\r\n\t * \r\n\t * @param {object} config - Configuration object\r\n\t */\r\n\tconstructor(config) {\r\n\t\t\r\n\t\tsuper(config);\r\n\t\t\r\n\t\tlet dc = this;\r\n\t\tdc.CONSTANTS.NET = NETservices_CONSTANTS;\r\n\t\t\r\n\t\tif (config.state !== undefined) {\r\n\t\t\tdc.state = config.state.toString();\r\n\t\t}\r\n\t}\r\n\t\r\n\t\r\n\t/**\r\n\t * Initialize data channel\r\n\t */\r\n\tinitDataChannel () {\r\n\t\t\r\n\t\tsuper.initDataChannel();\r\n\t\t\r\n\t\tlet dc = this;\t\t\r\n\t\tlet node = dc.config._node;\r\n\t\tlet channelID = dc.config._dchID;\r\n\t\t\r\n\t\ttry {\r\n\t\t\tlet message = {\r\n\t\t\t\t\t\"channelID\" : channelID\r\n\t\t\t\t};\r\n\t\t\t\r\n\t\t\t// Emit message initDC \r\n\t\t\tnode.socket.emit(dc.CONSTANTS.NET.Messages.initDC, message);\r\n\t\t\t\r\n\t\t} catch (e) {\r\n\t\t\t// TODO: handle exception\r\n\t\t\tconsole.log('<EEE> ST NodesNetService._event_initDCOnNode');\t// TODO REMOVE DEBUG LOG\r\n\t\t\tconsole.log(e);\t// TODO REMOVE DEBUG LOG\r\n\t\t}\r\n\t\t\r\n\t\tconsole.log('<*> ST NodeDC.initDataChannel');\t// TODO REMOVE DEBUG LOG\r\n\t\tconsole.log(' <~> NodeID: ' + node.config.nodeID);\t// TODO REMOVE DEBUG LOG\r\n\t\tconsole.log(' <~> ChannelID: ' + channelID);\t// TODO REMOVE DEBUG LOG\r\n\r\n\t}\r\n\t\r\n\t\r\n\t/**\r\n\t * Close data channel\r\n\t */\r\n\tcloseDataChannel() {\r\n\t\t\t\r\n\t\tsuper.closeDataChannel();\r\n\t\t\r\n\t\tlet dc = this;\t\t\r\n\t\tlet node = dc.config._node;\r\n\t\tlet channelID = dc.config._dchID;\r\n\t\t\r\n\t\ttry {\r\n\t\t\tlet message = {\r\n\t\t\t\t\t\"channelID\" : channelID\r\n\t\t\t\t};\r\n\t\t\t\r\n\t\t\t// Emit message initDC \r\n\t\t\tnode.socket.emit(dc.CONSTANTS.NET.Messages.closeDC, message);\r\n\t\t\t\r\n\t\t} catch (e) {\r\n\t\t\t// TODO: handle exception\r\n\t\t\tconsole.log('<EEE> ST NodeDC.closeDataChannel');\t// TODO REMOVE DEBUG LOG\r\n\t\t\tconsole.log(e);\t// TODO REMOVE DEBUG LOG\r\n\t\t}\r\n\t\t\r\n\t\tconsole.log('<*> ST NodeDC.closeDataChannel');\t// TODO REMOVE DEBUG LOG\r\n\t\tconsole.log(' <~> NodeID: ' + node.config.nodeID);\t// TODO REMOVE DEBUG LOG\r\n\t\tconsole.log(' <~> ChannelID: ' + channelID);\t// TODO REMOVE DEBUG LOG\r\n\t\t\r\n\t}\r\n\t\r\n\t\r\n\t/**\r\n\t * Start data channel\r\n\t */\r\n\tstartDataChannel() {\r\n\t\t\t\r\n\t\tsuper.startDataChannel();\r\n\t\t\r\n\t\tlet dc = this;\t\t\r\n\t\tlet node = dc.config._node;\r\n\t\tlet channelID = dc.config._dchID;\r\n\t\t\r\n\t\ttry {\r\n\t\t\tlet message = {\r\n\t\t\t\t\t\"channelID\" : channelID\r\n\t\t\t\t};\r\n\t\t\t\r\n\t\t\t// Emit message startDataChannel \r\n\t\t\tnode.socket.emit(dc.CONSTANTS.NET.Messages.startDataChannel, message);\r\n\t\t\t\r\n\t\t} catch (e) {\r\n\t\t\t// TODO: handle exception\r\n\t\t\tconsole.log('<EEE> ST NodeDC.startDataChannel');\t// TODO REMOVE DEBUG LOG\r\n\t\t\tconsole.log(e);\t// TODO REMOVE DEBUG LOG\r\n\t\t}\r\n\t\t\r\n\t\tconsole.log('<*> ST NodeDC.startDataChannel');\t// TODO REMOVE DEBUG LOG\r\n\t\tconsole.log(' <~> NodeID: ' + node.config.nodeID);\t// TODO REMOVE DEBUG LOG\r\n\t\tconsole.log(' <~> ChannelID: ' + channelID);\t// TODO REMOVE DEBUG LOG\r\n\t\t\r\n\t}\r\n\t\r\n\t\r\n\t/**\r\n\t * Stop data channel\r\n\t */\r\n\tstopDataChannel() {\r\n\t\t\t\r\n\t\tsuper.stopDataChannel();\r\n\t\t\r\n\t\tlet dc = this;\t\t\r\n\t\tlet node = dc.config._node;\r\n\t\tlet channelID = dc.config._dchID;\r\n\t\t\r\n\t\ttry {\r\n\t\t\tlet message = {\r\n\t\t\t\t\t\"channelID\" : channelID\r\n\t\t\t\t};\r\n\t\t\t\r\n\t\t\t// Emit message stopDataChannel \r\n\t\t\tnode.socket.emit(dc.CONSTANTS.NET.Messages.stopDataChannel, message);\r\n\t\t\t\r\n\t\t} catch (e) {\r\n\t\t\t// TODO: handle exception\r\n\t\t\tconsole.log('<EEE> ST NodeDC.stopDataChannel');\t// TODO REMOVE DEBUG LOG\r\n\t\t\tconsole.log(e);\t// TODO REMOVE DEBUG LOG\r\n\t\t}\r\n\t\t\r\n\t\tconsole.log('<*> ST NodeDC.stopDataChannel');\t// TODO REMOVE DEBUG LOG\r\n\t\tconsole.log(' <~> NodeID: ' + node.config.nodeID);\t// TODO REMOVE DEBUG LOG\r\n\t\tconsole.log(' <~> ChannelID: ' + channelID);\t// TODO REMOVE DEBUG LOG\r\n\t\t\r\n\t}\r\n\t\r\n}\r\n\r\n\r\n/**\r\n * Nodes net manager\r\n * \r\n * @class\r\n * @implements DataChannelsManager\r\n */\r\nclass NodesNetManager extends DataChannelsManager {\r\n\r\n\t/**\r\n\t * @constructs NodesNetManager\r\n\t */\r\n\tconstructor() {\r\n\t\t\r\n\t\tsuper();\r\n\r\n\t\tlet nnetm = this;\r\n\r\n\t\tnnetm.CONSTANTS.Events.DeleteDCOnNode = \"Delete DC on Node\";\r\n\t\tnnetm.CONSTANTS.Events.SetDCOptionsOnNode = \"Set DC options on Node\";\r\n\t\t\r\n\t\tnnetm.CONSTANTS.Events.initDCOnNode = \"Init DC on Node\";\r\n\t\tnnetm.CONSTANTS.Events.closeDCOnNode = \"Close DC on Node\";\r\n\r\n\t}\r\n\t\r\n\t\r\n\t/**\r\n\t * Get Node data channel\r\n\t * \r\n\t * @param {object} config - Configuration object for DC\r\n\t * @returns {DataChannel}\r\n\t */\r\n\tstatic get_NodeDC(config) {\r\n\t\t\r\n\t\tlet dataChannel = new NodeDC(config);\r\n\t\treturn dataChannel;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Add data channel to node\r\n\t * \r\n\t * @param {object} node - Node\r\n\t * @param {string} dchID - Data channel ID\r\n\t * @param {object} config - Configuration object for DC\r\n\t * \r\n\t * @throws {Exception}\r\n\t */\r\n\taddDataChannelToNode(node, dchID, config) {\r\n\r\n\t\tlet nnetm = this;\r\n\r\n\t\tlet dch_Config = {\r\n\t\t\t'id' : node.config.nodeID + '.' + dchID,\r\n\t\t\t'type' : nnetm.CONSTANTS.Config.DCtype_socketio,\r\n\t\t\t'_node' : node,\r\n\t\t\t'_nodeID' : node.config.nodeID,\r\n\t\t\t'_dchID' : dchID,\r\n\t\t\t'_netState' : nnetm.CONSTANTS.States.DCstate_Config\r\n\t\t};\r\n\r\n\r\n\t\t// ~ ~ ~ ^^^ ~ ~ ~  ^^^ ~ ~ ~  ^^^ ~ ~ ~ ^^^ ~ ~ ~  ^^^ ~ |\\/|~~~\r\n\t\t// Extra config parameters\r\n\t\tif (config !== undefined &&\r\n\t\t\t\tconfig !== null) {\r\n\r\n\t\t\tif (config.state) {\r\n\t\t\t\tdch_Config.state = config.state;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (config.mode) {\r\n\t\t\t\tdch_Config.mode = config.mode;\r\n\t\t\t}\r\n\r\n\t\t\tif (config.socketPort) {\r\n\t\t\t\tdch_Config.socketPort = config.socketPort;\r\n\t\t\t}\r\n\r\n\t\t\tif (config.netLocation) {\r\n\t\t\t\tdch_Config.netLocation = config.netLocation;\r\n\t\t\t}\r\n\r\n\t\t\tif (config._synchro) {\r\n\t\t\t\tdch_Config._synchro = config._synchro;\r\n\t\t\t}\r\n\r\n\t\t}\r\n\t\t// ~ ~ ~ ^^^ ~ ~ ~  ^^^ ~ ~ ~  ^^^ ~ ~ ~ ^^^ ~ ~ ~  ^^^ ~ |/\\|~~~\r\n\r\n\r\n\t\tconsole.log('<*> ST NodesNetManager.addDataChannelToNode');\t// TODO REMOVE DEBUG LOG\r\n\t\tconsole.log(' <~> Channel ID: ' + dch_Config._dchID);\t// TODO REMOVE DEBUG LOG\r\n\t\tconsole.log(' <~> Node ID:' + dch_Config._nodeID);\t// TODO REMOVE DEBUG LOG\r\n\r\n\r\n\t\ttry {\r\n\t\t\tlet dch = NodesNetManager.get_NodeDC(dch_Config);\r\n\t\t\tnnetm.addDataChannel(dch);\r\n\t\t} catch (e) {\r\n\t\t\tthrow \"Cannot add Datachannel. \" + e;\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t\r\n\t/**\r\n\t * Remove data channel from node\r\n\t * \r\n\t * @param {object} node - Node\r\n\t * @param {string} dchID - Data channel ID\r\n\t */\r\n\tremoveDataChannelFromNode(node, dchID ) {\r\n\t\tlet nnetm = this;\r\n\t\tnnetm.removeDataChannel(node.config.nodeID + '.' + dchID);\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Get data channel of node\r\n\t * \r\n\t * @param {string} nodeID - Node ID\r\n\t * @param {string} dchID - Data channel ID\r\n\t */\r\n\tgetDataChannelOfNode(nodeID, dchID) {\r\n\t\tlet nnetm = this;\r\n\t\treturn nnetm.getDataChannelByID(nodeID + '.' + dchID);\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Returns data channels searched by DataChannel.config._nodeID\r\n\t * \r\n\t * @param {string} nodeID - Node ID\r\n\t */\r\n\tgetDataChannelsOfNode(nodeID){\r\n\r\n\t\tlet nnetm = this;\r\n\r\n\t\tlet nodeDCHs = nnetm.channelsList.filter(function(dch, _i, _items) {\r\n\r\n\t\t\tif (dch.config._nodeID === nodeID) {\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\r\n\t\t});\r\n\r\n\t\treturn {\r\n\t\t\t\"numDataChannels\": nodeDCHs.length,\r\n\t\t\t\"dataChannels\": nodeDCHs\r\n\t\t};\r\n\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Set options of data channel\r\n\t */\r\n\tsetOptionsOfDataChannel(dch, options) {\r\n\r\n\t\tlet nnetm = this;\r\n\r\n\t\tconsole.log('<*> ST NodesNetManager.setOptionsOfDataChannel');\t// TODO REMOVE DEBUG LOG\r\n\t\tconsole.log(options);\t// TODO REMOVE DEBUG LOG\r\n\r\n\t\tif (dch.config.state !== undefined &&\r\n\t\t\t\tdch.config.state !== dch.CONSTANTS.States.DCstate_Config) {\r\n\t\t\tthrow \"Bad data channel state\";\r\n\t\t}\r\n\t\t\r\n\t\t// Emit event SetDCOptionsOnNode\r\n\t\tnnetm.eventEmitter.emit(nnetm.CONSTANTS.Events.SetDCOptionsOnNode,\r\n\t\t\t\t{ \"node\" : dch.config._node,\r\n\t\t\t\t\t\"channelID\" : dch.config._dchID,\r\n\t\t\t\t\t\"options\" : options\r\n\t\t\t\t});\r\n\r\n\t}\r\n\t\r\n\t\r\n\t/**\r\n\t * Initialize DC on Node\r\n\t */\r\n\tinitializeDConNode(dch, node) {\r\n\t\t\r\n\t\tlet nnetm = this;\r\n\r\n\t\tconsole.log('<*> ST NodesNetManager.initializeDConNode');\t// TODO REMOVE DEBUG LOG\r\n\r\n\t\tif (dch.state !== dch.CONSTANTS.States.DCstate_Config) {\r\n\t\t\tthrow \"Bad channel state\";\r\n\t\t}\r\n\t\t\r\n\t\t\r\n\t\t// Emit event initDCOnNode\r\n\t\tnnetm.eventEmitter.emit(nnetm.CONSTANTS.Events.initDCOnNode,\r\n\t\t\t\t{ \"node\" : dch.config._node,\r\n\t\t\t\t\t\"channelID\" : dch.config._dchID\r\n\t\t\t\t});\r\n\t\t\r\n\t}\r\n\r\n\t\r\n\t/**\r\n\t * Close DC on Node\r\n\t */\t\r\n\tcloseDConNode(dch, node) {\r\n\t\t\r\n\t\tlet nnetm = this;\r\n\r\n\t\tconsole.log('<*> ST NodesNetManager.closeDConNode');\t// TODO REMOVE DEBUG LOG\r\n\r\n\t\tif (dch.state !== dch.CONSTANTS.States.State_Ready) {\r\n\t\t\tthrow \"Bad channel state\";\r\n\t\t}\r\n\t\t\r\n\t\t\r\n\t\t// Emit event closeDCOnNode\r\n\t\tnnetm.eventEmitter.emit(nnetm.CONSTANTS.Events.closeDCOnNode,\r\n\t\t\t\t{ \"node\" : dch.config._node,\r\n\t\t\t\t\t\"channelID\" : dch.config._dchID\r\n\t\t\t\t});\r\n\t\t\r\n\t}\r\n\t\r\n\r\n\t/**\r\n\t * Create data channel from node\r\n\t *\r\n\t * Synchronization tasks\r\n\t */\r\n\t_createDCfromNode(nodeDCH, node) {\r\n\r\n\t\tlet nnetm = this;\r\n\r\n\t\tconsole.log('<*> ST NodesNetManager._createDCfromNode');\t// TODO REMOVE DEBUG LOG\r\n\t\tconsole.log(nodeDCH);\t// TODO REMOVE DEBUG LOG\r\n\r\n\r\n\t\t// Create data channel from node\r\n\t\ttry {\r\n\t\t\tlet dchConfig = {\r\n\t\t\t\t\t\"mode\" : null,\r\n\t\t\t\t\t\"state\" : nodeDCH.state,\r\n\t\t\t\t\t\"_synchro\" : true\r\n\t\t\t\t};\r\n\r\n\t\t\tswitch (nodeDCH.mode) {\r\n\t\t\t\tcase \"input\":\r\n\t\t\t\t\tdchConfig.mode = nnetm.CONSTANTS.Config.modeIN;\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase \"output\":\r\n\t\t\t\t\tdchConfig.mode = nnetm.CONSTANTS.Config.modeOUT;\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tthrow \"Bad mode.\";\r\n//\t\t\t\t\tbreak;\r\n\t\t\t\t\r\n\t\t\t}\r\n\t\t\t\r\n\r\n\t\t\ttry {\r\n\t\t\t\tnnetm.addDataChannelToNode(node, nodeDCH.id, dchConfig);\r\n\r\n\t\t\t} catch (e) {\r\n\t\t\t\tthrow \"Error adding channel. \" + e.message;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t} catch (e) {\r\n\t\t\t// TODO: handle exception\r\n\t\t\tconsole.log('<EEE> ST NodesNetManager._createDCfromNode');\t// TODO REMOVE DEBUG LOG\r\n\t\t\tconsole.log(e.message);\t// TODO REMOVE DEBUG LOG\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Delete data channel on server\r\n\t */\r\n\t_deleteDConServer(dch, node) {\r\n\t\t\r\n\t\tlet nnetm = this;\r\n\r\n\t\tconsole.log('<*> ST NodesNetManager._deleteDConServer');\t// TODO REMOVE DEBUG LOG\r\n\t\tconsole.log(' <~> ' + dch.config.id);\t// TODO REMOVE DEBUG LOG\r\n\r\n\t\ttry {\r\n\t\t\tnnetm.removeDataChannelFromNode(node, dch.config._dchID, {\"force\": true});\r\n\r\n\t\t} catch (e) {\r\n\t\t\t// TODO: handle exception\r\n\t\t\tconsole.log('<EEE> ST NodesNetManager._deleteDConServer');\t// TODO REMOVE DEBUG LOG\r\n\t\t\tconsole.log(e);\t// TODO REMOVE DEBUG LOG\r\n\t\t}\r\n\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Delete data channel on node\r\n\t */\r\n\t_deleteDConNode(channelID, stNode) {\r\n\r\n\t\tlet nnetm = this;\r\n\t\t\r\n\t\t// Emit event DeleteDCOnNode\r\n\t\tnnetm.eventEmitter.emit(nnetm.CONSTANTS.Events.DeleteDCOnNode, {\"node\": stNode, \"channelID\": channelID});\t\r\n\t}\r\n\r\n}\r\n\r\n\r\nmodule.exports = NodesNetManager;\r\n"],"sourceRoot":"C:\\Users\\Felipe\\Documents\\Work\\SomeThings\\dev\\NLVL_STNetwork\\es6"}