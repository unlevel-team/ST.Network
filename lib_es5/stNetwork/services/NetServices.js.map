{"version":3,"sources":["stNetwork/services/NetServices.js"],"names":[],"mappings":"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","file":"stNetwork/services/NetServices.js","sourcesContent":["\"use strict\";\r\n\r\n/*\r\n SomeThings Network services library\r\n\r\n*/\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * Network service constants\r\n * \r\n * @memberof st.net.services\r\n */\r\nconst NETservices_CONSTANTS = {\r\n\t\t\r\n\t\"Messages\" : {\r\n\t\t\"getNetInfo\" : \"Get Net Info\",\r\n\t\t\"NetInfo\" : \"Net Info\",\r\n\t\t\r\n\t\t\r\n\t\t\"createDataChannel\" : \"Create DC\",\r\n\t\t\"DataChannelCreated\" : \"DC Created\",\r\n\t\t\r\n\t\t\"deleteDataChannel\" : \"Delete DC\",\r\n\t\t\"DataChannelDeleted\" : \"DC Deleted\",\r\n\t\t\r\n\t\t\r\n\t\t\"getDataChannelOptions\" : \"get DC Options\",\r\n\t\t\"DataChannelOptions\" : \"DC Options\",\r\n\t\t\r\n\t\t\"SetDCOptions\" : \"Set DC Options\",\r\n\t\t\"DCOptionsUpdated\" : \"DC Options Updated\",\r\n\t\t\r\n\t\t\"initDC\" : \"Init DC\",\r\n\t\t\"DCInitialized\" : \"DC Initialized\",\r\n\r\n\t\t\"closeDC\" : \"Close DC\",\r\n\t\t\"DCClosed\" : \"DC Closed\",\r\n\t\t\r\n\t\t\"startDataChannel\" : \"Start DC\",\r\n\t\t\"DataChannelStarted\" : \"DC started\",\r\n\t\t\r\n\t\t\"stopDataChannel\" : \"Stop DC\",\r\n\t\t\"DataChannelStopped\" : \"DC Stopped\"\r\n\r\n\t},\r\n\t\r\n\t\r\n\t\r\n\t\"Events\" : {\r\n\t\t\"DataChannelCreated\" : \"DC Created\"\r\n\r\n\t}\r\n\t\r\n};\r\n\r\n\r\n\r\n\r\n/**\r\n * The stURI_DATA object.\r\n * \r\n * @typedef {Object} stURI_DATA\r\n * @memberof st.net.services\r\n * @type Object\r\n * \r\n * @property {string} stIRI - The ST URI parsed\r\n * @property {string} schema - URI schema\r\n * @property {string} context - URI context\r\n * @property {string} action - URI action\r\n * @property {st.net.services.stIRI_Param[]} params - URI parameters objects\r\n * \r\n */\r\n\r\n\r\n/**\r\n * The stURI_DATA_Param object.\r\n * \r\n * @typedef {Object} stIRI_Param\r\n * @memberof st.net.services\r\n * @type Object\r\n * \r\n * @property {string} name - Name\r\n * @property {string} value - Value\r\n * \r\n */\r\n\r\n\r\n\r\n/**\r\n * The response of check ST_URI.\r\n * \r\n * @typedef {Object} Response_chkST_URI\r\n * @memberof st.net.services.NETservices_Lib\r\n * @type Object\r\n * \r\n * @property {boolean} checkOK - Check result\r\n * @property {string} errorMSG - Error message\r\n * \r\n */\r\n\r\n\r\n\r\n\r\n/**\r\n * ST_URI\r\n * <pre>\r\n * Represents the information related to the data of a stIRI\r\n * </pre>\r\n * \r\n * @class\r\n * \r\n * @memberof st.net.services\r\n * \r\n * @property {string} stIRI - The ST URI parsed\r\n * @property {string} schema - URI schema\r\n * @property {string} context - URI context\r\n * @property {string} action - URI action\r\n * @property {st.net.services.stIRI_Param[]} params - URI parameters objects\r\n * \r\n */\r\nclass ST_URI {\r\n\t\r\n\t/**\r\n\t * \r\n\t * @constructs ST_URI\r\n\t * \r\n\t * @param {object} [options] - Options object\r\n\t * @param {st.net.services.stURI_DATA} [options.stURI_DATA] - ST URI DATA object\r\n\t * \r\n\t */\r\n\tconstructor(options) {\r\n\t\t\r\n\t\tif (options === undefined ||\r\n\t\t\t\toptions === null) {\r\n\t\t\toptions = {};\r\n\t\t}\r\n\t\t\r\n\t\tlet stURI = this;\r\n\t\tstURI.stURI = null;\r\n\t\tstURI.schema = null;\r\n\t\tstURI.context = null;\r\n\t\tstURI.action = null;\r\n\t\tstURI.params = [];\r\n\t\t\r\n\t\t\r\n\t\tif (options.stURI_DATA !== undefined) {\r\n\t\t\t\r\n\t\t\tlet uriDATA = options.stURI_DATA;\r\n\t\t\t\r\n\t\t\tstURI.stURI = uriDATA.stURI;\r\n\t\t\tstURI.schema = uriDATA.schema;\r\n\t\t\tstURI.context = uriDATA.context;\r\n\t\t\tstURI.action = uriDATA.action;\r\n\t\t\tstURI.params = uriDATA.params;\r\n\t\t\t\r\n\t\t}\r\n\t\t\r\n\t}\r\n\t\r\n\t\r\n\t/**\r\n\t * Get parameter by name\r\n\t * \r\n\t * @param {object} options -  Options object\r\n\t * @param {string} options.name -  name to match\r\n\t * @param {st.net.services.ST_URI} [options.stIRI] - ST_URI object\r\n\t * \r\n\t * @return {object} result - Result\r\n\t * @property {st.net.services.stIRI_Param|null} result.param - The parameter\r\n\t * @property {number} result.position - Position of the result\r\n\t * \r\n\t */\r\n\tgetParameterByName(options) {\r\n\t\t\r\n\t\tif (options === undefined ||\r\n\t\t\t\toptions === null) {\r\n\t\t\toptions = {};\r\n\t\t}\r\n\t\t\r\n\t\tlet _stURI = this;\r\n\t\tif (options.sUIRI !== undefined) {\r\n\t\t\t_stURI = options.stURI;\r\n\t\t}\r\n\t\t\r\n\t\tif (options.name === undefined) {\r\n\t\t\tthrow 'name is required.';\r\n\t\t}\r\n\t\tlet _name = options.name;\r\n\r\n\t\t\r\n\t\treturn NETservices_Lib.getParamByName({\r\n\t\t\t'params': _stURI.params,\r\n\t\t\t'name': _name\r\n\t\t});\r\n\t\t\r\n\t}\r\n\t\r\n\t\r\n\t/**\r\n\t * Check ST IRI\r\n\t * \r\n\t * @param {object} options - Options object.\r\n\t * @param {object} [options.stIRI] - ST_URI reference.\r\n\t * @param {string} options.context - context to match.\r\n\t * @param {string} options.action - action to match.\r\n\t * \r\n\t * @returns {st.net.services.NETservices_Lib.Response_chkST_URI}\r\n\t * \r\n\t * @throws Exceptions\r\n\t * \r\n\t */\r\n\tcheck_ST_URI(options) {\r\n\t\t\r\n\t\tif (options === undefined) {\r\n\t\t\toptions = {};\r\n\t\t}\r\n\r\n\t\tlet _stURI = this;\r\n\t\tif (options.stURI !== undefined) {\r\n\t\t\t_stURI = options.stURI;\r\n\t\t}\r\n\t\t\r\n\t\treturn NETservices_Lib.check_ST_URI({\r\n\t\t\t'stURI': _stURI,\r\n\t\t\t'context': options.context,\r\n\t\t\t'action': options.action\r\n\t\t});\r\n\t\t\r\n\t}\r\n\t\r\n}\r\n\r\n\r\n/**\r\n * NET services library\r\n * \r\n * @namespace NETservices_Lib\r\n * @memberof st.net.services\r\n * \r\n */\r\nlet NETservices_Lib = {\r\n\t\t\r\n\t\t\r\n\t/**\r\n\t * Parses ST URI\r\n\t * \r\n\t * <pre>\r\n\t * \r\n\t * -- scheme:context:body\r\n\t * \r\n\t * st:engines:config/[type=file][path=./stSensors/stSensor_Keyboard.js]\r\n\t * st:engines:config/[type=module][moduleName=st.engines][method=sensors.getSensor_Dummy01]\r\n\t * st:engines:config/[type=module][moduleName=my.module][method=getMySensor]\r\n\t * \r\n\t * -- regex filter for body params ^\\[(\\s+\\S+)*\\]$\r\n\t * -- (^\\[(\\s+\\S+)*\\]$)*\r\n\t * -- (?:\\[.+\\])\r\n\t * \r\n\t * \r\n\t * </pre>\r\n\t * \r\n\t * @memberof st.net.services.NETservices_Lib\r\n\t * \r\n\t * @param {string} stIRI - The ST URI string\r\n\t * @param {object} options - Options object.\r\n\t * \r\n\t * @returns {st.net.services.stURI_DATA}\r\n\t * @throws Exceptions\r\n\t * \r\n\t */\r\n\t\"parse_stURI\": function (stURI, options) {\r\n\t\t\r\n\t\tif (options === undefined ||\r\n\t\t\t\toptions === null) {\r\n\t\t\toptions = {};\r\n\t\t}\r\n\t\t\r\n\t\t\r\n\t\tlet _URIpieces = stURI.split(':');\r\n\t\tlet _URIschema = _URIpieces[0];\r\n\t\t\r\n\t\tif (_URIschema !== 'st') {\r\n\t\t\tthrow \"Bad URI\";\r\n\t\t}\r\n\t\t\r\n\t\t// console.log('<~i~> NETservices_Lib.parse_stURI');\t// TODO REMOVE DEBUG LOG\r\n\t\t// console.log(' <~> _URIpieces');\t// TODO REMOVE DEBUG LOG\r\n\t\t// console.log(_URIpieces);\t// TODO REMOVE DEBUG LOG\r\n\t\t// console.log(' <~> _URIschemma');\t// TODO REMOVE DEBUG LOG\r\n\t\t// console.log(_URIschema);\t// TODO REMOVE DEBUG LOG\r\n\t\t\r\n\t\t\r\n\t\tlet _URIcontext = _URIpieces[1];\r\n\t\tlet _URIbody = stURI.substr(_URIschema.length + _URIcontext.length + 1);\r\n\t\t\r\n\t\tlet _BODYaction = _URIbody.substring(\r\n\t\t\t\t1, \r\n\t\t\t\t_URIbody.indexOf('/') );\r\n\t\t\r\n\t\tlet _BODYparams = _URIbody.substring( _URIbody.indexOf('/') + 1 );\r\n\t\t\r\n\t\tlet _token_START = '['; ;\r\n\t\tlet _token_END = ']'; ;\r\n\t\t\r\n\t\t\r\n\t\tlet _params = _BODYparams.split( _token_END );\t// Split for parameters\r\n\t\tlet _paramsFiltered = [];\r\n\t\t\r\n\t\t_paramsFiltered = _params.filter(function(_param, _i) {\t\t// Filter parameters \r\n\t\t\t\r\n\t\t\tif (_param[0] === _token_START) {\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t});\r\n\t\t\r\n\t\tlet params = [];\r\n\t\t_paramsFiltered.forEach(function(_param, _i) {\t\t// Add parameters\r\n\t\t\t\r\n\t\t\tlet param = {};\r\n\t\t\tparam.name = _param.substring( 1, _param.indexOf('=') );\r\n\t\t\tparam.value = _param.substring( _param.indexOf('=') + 1 );\r\n\t\t\tparams.push(param);\r\n\t\t});\r\n\t\t\r\n\t\t\r\n\t\t\r\n\t\tlet stURI_DATA = {\r\n\t\t\t\t\r\n\t\t\t\"stURI\": stURI,\r\n\t\t\t\"schema\": _URIschema,\r\n\t\t\t\"context\": _URIcontext,\r\n\t\t\t\"action\": _BODYaction,\r\n\t\t\t\"params\": params\r\n\t\t};\r\n\t\t\r\n\t\treturn stURI_DATA;\r\n\t\t\r\n\t\t\r\n\t},\r\n\t\r\n\t\r\n\t/**\r\n\t * Return paramerter searched by name\r\n\t * \r\n\t * @memberof st.net.services.NETservices_Lib\r\n\t * \r\n\t * @param {object} options - Options object.\r\n\t * @param {st.net.services.stIRI_Param[]} options.params - Array of parameters.\r\n\t * @param {string} options.name - Name for the filter.\r\n\t * \r\n\t * @returns {st.net.services.stURI_DATA}\r\n\t * @throws Exceptions\r\n\t * \r\n\t * \r\n\t */\r\n\t'getParamByName': function(options) {\r\n\t\t\r\n\t\tif (options === undefined) {\r\n\t\t\toptions = {};\r\n\t\t}\r\n\t\t\r\n\t\tif (options.params === undefined) {\r\n\t\t\tthrow 'params is required.';\r\n\t\t}\r\n\t\tlet _params = options.params;\r\n\t\t\r\n\t\tif (options.name === undefined) {\r\n\t\t\tthrow 'name is required.';\r\n\t\t}\r\n\t\tlet _name = options.name;\r\n\r\n\t\tlet _i = -1;\r\n\t\tlet _param = null\r\n\t\t\r\n\t\t_i = _params.map(function(_x) {return _x.name; }).indexOf(_name);\r\n\t\tif (_i !== -1) {\r\n\t\t\t_param = _params[_i];\r\n\t\t}\r\n\t\t\r\n\t\treturn {\r\n\t\t\t\"param\": _param,\r\n\t\t\t\"position\": _i\r\n\t\t};\r\n\r\n\r\n\t},\r\n\t\r\n\t\r\n\t/**\r\n\t * Return new ST_IRI\r\n\t * \r\n\t * @memberof st.net.services.NETservices_Lib\r\n\t * \r\n\t * @param {object} options - Options object.\r\n\t * @param {st.net.services.stURI_DATA} options.stURI_DATA - the stURI_DATA object.\r\n\t * \r\n\t * @returns {st.net.services.ST_URI}\r\n\t * @throws Exceptions\r\n\t * \r\n\t * \r\n\t */\r\n\t'getNew_ST_URI': function (options) {\r\n\t\t\r\n\t\tif (options === undefined) {\r\n\t\t\toptions = {};\r\n\t\t}\r\n\t\t\r\n\t\tif (options.stURI_DATA === undefined) {\r\n\t\t\tthrow 'stURI_DATA is required.';\r\n\t\t}\r\n\t\tlet _stURI_DATA = options.stURI_DATA;\r\n\r\n\t\tlet _stIRI = new ST_URI({\r\n\t\t\t'stURI_DATA': _stURI_DATA\r\n\t\t});\r\n\t\t\r\n\t\treturn _stIRI;\r\n\t\t\r\n\t},\r\n\t\r\n\t\t\r\n\t/**\r\n\t * Check ST_URI\r\n\t * \r\n\t * @memberof st.net.services.NETservices_Lib\r\n\t * \r\n\t * @param {object} options - Options object.\r\n\t * @param {st.net.services.ST_URI} options.stURI - the ST_URI object.\r\n\t * @param {string} options.context - context to match.\r\n\t * @param {string} options.action - action to match.\r\n\t * \r\n\t * @returns {st.net.services.NETservices_Lib.Response_chkST_URI}\r\n\t * \r\n\t * \r\n\t * @throws Exceptions\r\n\t * \r\n\t * \r\n\t */\r\n\t'check_ST_URI': function(options) {\r\n\t\t\r\n\t\t/*\r\n\t\t  schema: 'st',\r\n\t\t  context: 'engines',\r\n\t\t  action: 'config',\r\n\t\t*/\r\n\t\t\r\n\t\tif (options === undefined) {\r\n\t\t\toptions = {};\r\n\t\t}\r\n\r\n\t\t\r\n\t\tif (options.stURI === undefined) {\r\n\t\t\tthrow 'stURI is required.';\r\n\t\t}\r\n\t\tlet stURI = options.stURI;\r\n\t\t\r\n\t\t\r\n\t\tlet _response = {\r\n\t\t\t'checkOK': false,\r\n\t\t\t'errorMSG': ''\r\n\t\t};\r\n\t\t\r\n\t\ttry {\r\n\t\t\t\r\n\t\t\tif (stURI.schema !== 'st') {\r\n\t\t\t\tthrow 'Bad schema';\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (options.context !== undefined && \r\n\t\t\t\t\toptions.context !== stURI.context) {\r\n\t\t\t\tthrow 'Context not match';\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (options.action !== undefined && \r\n\t\t\t\t\toptions.action !== stURI.action) {\r\n\t\t\t\tthrow 'Action not match';\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t\r\n\t\t\t_response.checkOK = true;\r\n\t\t\t\r\n\t\t} catch (e) {\r\n\t\t\t// TODO: handle exception\r\n\t\t\t\r\n\t\t\t_response.errorMSG = e;\r\n\t\t}\r\n\r\n\t\treturn _response;\r\n\t\t\r\n\t}\r\n\t\r\n\t\r\n};\r\n\r\n\r\n\r\n\r\n\r\nlet _lib = {\r\n\t\t\r\n\t\"NETservices_CONSTANTS\": NETservices_CONSTANTS,\r\n\t\"NETservices_Lib\": NETservices_Lib,\r\n\t'ST_URI': ST_URI\r\n\t\t\r\n};\r\n\r\n\r\n\r\nmodule.exports = _lib;"],"sourceRoot":"C:\\Users\\Felipe\\Documents\\Work\\SomeThings\\dev\\NLVL_STNetwork\\es6"}